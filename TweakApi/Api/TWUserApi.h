#import <Foundation/Foundation.h>
#import "TWInlineResponse200.h"
#import "TWUser.h"
#import "TWInlineResponse2002.h"
#import "TWAccessToken.h"
#import "TWInlineResponse2001.h"
#import "TWApi.h"

/**
* tweak-api
* Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface TWUserApi: NSObject <TWApi>

extern NSString* kTWUserApiErrorDomain;
extern NSInteger kTWUserApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Confirm a user registration with email verification token.
/// 
///
/// @param uid 
/// @param token 
/// @param redirect  (optional)
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) userConfirmWithUid: (NSString*) uid
    token: (NSString*) token
    redirect: (NSString*) redirect
    completionHandler: (void (^)(NSError* error)) handler;


/// Count instances of the model matched by where from the data source.
/// 
///
/// @param where Criteria to match model instances (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse200*
-(NSNumber*) userCountWithWhere: (NSString*) where
    completionHandler: (void (^)(TWInlineResponse200* output, NSError* error)) handler;


/// Create a new instance of the model and persist it into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userCreateWithData: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Create a change stream.
/// 
///
/// @param options  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSURL*
-(NSNumber*) userCreateChangeStreamGetUsersChangeStreamWithOptions: (NSString*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;


/// Create a change stream.
/// 
///
/// @param options  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSURL*
-(NSNumber*) userCreateChangeStreamPostUsersChangeStreamWithOptions: (NSString*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;


/// Delete a model instance by {{id}} from the data source.
/// 
///
/// @param _id Model id
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSNumber*) userDeleteByIdWithId: (NSString*) _id
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Check whether a model instance exists in the data source.
/// 
///
/// @param _id Model id
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse2002*
-(NSNumber*) userExistsGetUsersidExistsWithId: (NSString*) _id
    completionHandler: (void (^)(TWInlineResponse2002* output, NSError* error)) handler;


/// Check whether a model instance exists in the data source.
/// 
///
/// @param _id Model id
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse2002*
-(NSNumber*) userExistsHeadUsersidWithId: (NSString*) _id
    completionHandler: (void (^)(TWInlineResponse2002* output, NSError* error)) handler;


/// Find all instances of the model matched by filter from the data source.
/// 
///
/// @param filter Filter defining fields, where, include, order, offset, and limit (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSArray<TWUser>*
-(NSNumber*) userFindWithFilter: (NSString*) filter
    completionHandler: (void (^)(NSArray<TWUser>* output, NSError* error)) handler;


/// Find a model instance by {{id}} from the data source.
/// 
///
/// @param _id Model id
/// @param filter Filter defining fields and include (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userFindByIdWithId: (NSString*) _id
    filter: (NSString*) filter
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Find first instance of the model matched by filter from the data source.
/// 
///
/// @param filter Filter defining fields, where, include, order, offset, and limit (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userFindOneWithFilter: (NSString*) filter
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Login a user with username/email and password.
/// 
///
/// @param credentials 
/// @param include Related objects to include in the response. See the description of return value for more details. (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSNumber*) userLoginWithCredentials: (NSObject*) credentials
    include: (NSString*) include
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Logout a user with access token.
/// 
///
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) userLogoutWithCompletionHandler: 
    (void (^)(NSError* error)) handler;


/// Counts accessTokens of User.
/// 
///
/// @param _id User id
/// @param where Criteria to match model instances (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse200*
-(NSNumber*) userPrototypeCountAccessTokensWithId: (NSString*) _id
    where: (NSString*) where
    completionHandler: (void (^)(TWInlineResponse200* output, NSError* error)) handler;


/// Creates a new instance in accessTokens of this model.
/// 
///
/// @param _id User id
/// @param data  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWAccessToken*
-(NSNumber*) userPrototypeCreateAccessTokensWithId: (NSString*) _id
    data: (TWAccessToken*) data
    completionHandler: (void (^)(TWAccessToken* output, NSError* error)) handler;


/// Deletes all accessTokens of this model.
/// 
///
/// @param _id User id
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) userPrototypeDeleteAccessTokensWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a related item by id for accessTokens.
/// 
///
/// @param _id User id
/// @param fk Foreign key for accessTokens
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) userPrototypeDestroyByIdAccessTokensWithId: (NSString*) _id
    fk: (NSString*) fk
    completionHandler: (void (^)(NSError* error)) handler;


/// Find a related item by id for accessTokens.
/// 
///
/// @param _id User id
/// @param fk Foreign key for accessTokens
/// 
///  code:200 message:"Request was successful"
///
/// @return TWAccessToken*
-(NSNumber*) userPrototypeFindByIdAccessTokensWithId: (NSString*) _id
    fk: (NSString*) fk
    completionHandler: (void (^)(TWAccessToken* output, NSError* error)) handler;


/// Queries accessTokens of User.
/// 
///
/// @param _id User id
/// @param filter  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSArray<TWAccessToken>*
-(NSNumber*) userPrototypeGetAccessTokensWithId: (NSString*) _id
    filter: (NSString*) filter
    completionHandler: (void (^)(NSArray<TWAccessToken>* output, NSError* error)) handler;


/// Patch attributes for a model instance and persist it into the data source.
/// 
///
/// @param _id User id
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userPrototypeUpdateAttributesPatchUsersidWithId: (NSString*) _id
    data: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Patch attributes for a model instance and persist it into the data source.
/// 
///
/// @param _id User id
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userPrototypeUpdateAttributesPutUsersidWithId: (NSString*) _id
    data: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Update a related item by id for accessTokens.
/// 
///
/// @param _id User id
/// @param fk Foreign key for accessTokens
/// @param data  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWAccessToken*
-(NSNumber*) userPrototypeUpdateByIdAccessTokensWithId: (NSString*) _id
    fk: (NSString*) fk
    data: (TWAccessToken*) data
    completionHandler: (void (^)(TWAccessToken* output, NSError* error)) handler;


/// Replace attributes for a model instance and persist it into the data source.
/// 
///
/// @param _id Model id
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userReplaceByIdWithId: (NSString*) _id
    data: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Replace an existing model instance or insert a new one into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userReplaceOrCreateWithData: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Reset password for a user with email.
/// 
///
/// @param options 
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) userResetPasswordWithOptions: (NSObject*) options
    completionHandler: (void (^)(NSError* error)) handler;


/// Update instances of the model matched by {{where}} from the data source.
/// 
///
/// @param where Criteria to match model instances (optional)
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse2001*
-(NSNumber*) userUpdateAllWithWhere: (NSString*) where
    data: (TWUser*) data
    completionHandler: (void (^)(TWInlineResponse2001* output, NSError* error)) handler;


/// Patch an existing model instance or insert a new one into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userUpsertPatchUsersWithData: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Patch an existing model instance or insert a new one into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userUpsertPutUsersWithData: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;


/// Update an existing model instance or insert a new one into the data source based on the where criteria.
/// 
///
/// @param where Criteria to match model instances (optional)
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWUser*
-(NSNumber*) userUpsertWithWhereWithWhere: (NSString*) where
    data: (TWUser*) data
    completionHandler: (void (^)(TWUser* output, NSError* error)) handler;



@end
