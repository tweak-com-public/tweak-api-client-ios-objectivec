#import <Foundation/Foundation.h>
#import "TWInlineResponse200.h"
#import "TWDesign.h"
#import "TWInlineResponse2002.h"
#import "TWCategory.h"
#import "TWTag.h"
#import "TWCustomer.h"
#import "TWInlineResponse2001.h"
#import "TWApi.h"

/**
* tweak-api
* Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface TWDesignApi: NSObject <TWApi>

extern NSString* kTWDesignApiErrorDomain;
extern NSInteger kTWDesignApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Count instances of the model matched by where from the data source.
/// 
///
/// @param where Criteria to match model instances (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse200*
-(NSNumber*) designCountWithWhere: (NSString*) where
    completionHandler: (void (^)(TWInlineResponse200* output, NSError* error)) handler;


/// Create a new instance of the model and persist it into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designCreateWithData: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Create a change stream.
/// 
///
/// @param options  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSURL*
-(NSNumber*) designCreateChangeStreamGetDesignsChangeStreamWithOptions: (NSString*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;


/// Create a change stream.
/// 
///
/// @param options  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSURL*
-(NSNumber*) designCreateChangeStreamPostDesignsChangeStreamWithOptions: (NSString*) options
    completionHandler: (void (^)(NSURL* output, NSError* error)) handler;


/// Delete a model instance by {{id}} from the data source.
/// 
///
/// @param _id Model id
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSNumber*) designDeleteByIdWithId: (NSString*) _id
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Check whether a model instance exists in the data source.
/// 
///
/// @param _id Model id
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse2002*
-(NSNumber*) designExistsGetDesignsidExistsWithId: (NSString*) _id
    completionHandler: (void (^)(TWInlineResponse2002* output, NSError* error)) handler;


/// Check whether a model instance exists in the data source.
/// 
///
/// @param _id Model id
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse2002*
-(NSNumber*) designExistsHeadDesignsidWithId: (NSString*) _id
    completionHandler: (void (^)(TWInlineResponse2002* output, NSError* error)) handler;


/// Find all instances of the model matched by filter from the data source.
/// 
///
/// @param filter Filter defining fields, where, include, order, offset, and limit (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSArray<TWDesign>*
-(NSNumber*) designFindWithFilter: (NSString*) filter
    completionHandler: (void (^)(NSArray<TWDesign>* output, NSError* error)) handler;


/// Find a model instance by {{id}} from the data source.
/// 
///
/// @param _id Model id
/// @param filter Filter defining fields and include (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designFindByIdWithId: (NSString*) _id
    filter: (NSString*) filter
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Find first instance of the model matched by filter from the data source.
/// 
///
/// @param filter Filter defining fields, where, include, order, offset, and limit (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designFindOneWithFilter: (NSString*) filter
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Counts categories of Design.
/// 
///
/// @param _id Design id
/// @param where Criteria to match model instances (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse200*
-(NSNumber*) designPrototypeCountCategoriesWithId: (NSString*) _id
    where: (NSString*) where
    completionHandler: (void (^)(TWInlineResponse200* output, NSError* error)) handler;


/// Counts tags of Design.
/// 
///
/// @param _id Design id
/// @param where Criteria to match model instances (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse200*
-(NSNumber*) designPrototypeCountTagsWithId: (NSString*) _id
    where: (NSString*) where
    completionHandler: (void (^)(TWInlineResponse200* output, NSError* error)) handler;


/// Creates a new instance in categories of this model.
/// 
///
/// @param _id Design id
/// @param data  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWCategory*
-(NSNumber*) designPrototypeCreateCategoriesWithId: (NSString*) _id
    data: (TWCategory*) data
    completionHandler: (void (^)(TWCategory* output, NSError* error)) handler;


/// Creates a new instance in tags of this model.
/// 
///
/// @param _id Design id
/// @param data  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWTag*
-(NSNumber*) designPrototypeCreateTagsWithId: (NSString*) _id
    data: (TWTag*) data
    completionHandler: (void (^)(TWTag* output, NSError* error)) handler;


/// Deletes all categories of this model.
/// 
///
/// @param _id Design id
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) designPrototypeDeleteCategoriesWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Deletes all tags of this model.
/// 
///
/// @param _id Design id
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) designPrototypeDeleteTagsWithId: (NSString*) _id
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a related item by id for categories.
/// 
///
/// @param _id Design id
/// @param fk Foreign key for categories
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) designPrototypeDestroyByIdCategoriesWithId: (NSString*) _id
    fk: (NSString*) fk
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete a related item by id for tags.
/// 
///
/// @param _id Design id
/// @param fk Foreign key for tags
/// 
///  code:204 message:"Request was successful"
///
/// @return 
-(NSNumber*) designPrototypeDestroyByIdTagsWithId: (NSString*) _id
    fk: (NSString*) fk
    completionHandler: (void (^)(NSError* error)) handler;


/// Find a related item by id for categories.
/// 
///
/// @param _id Design id
/// @param fk Foreign key for categories
/// 
///  code:200 message:"Request was successful"
///
/// @return TWCategory*
-(NSNumber*) designPrototypeFindByIdCategoriesWithId: (NSString*) _id
    fk: (NSString*) fk
    completionHandler: (void (^)(TWCategory* output, NSError* error)) handler;


/// Find a related item by id for tags.
/// 
///
/// @param _id Design id
/// @param fk Foreign key for tags
/// 
///  code:200 message:"Request was successful"
///
/// @return TWTag*
-(NSNumber*) designPrototypeFindByIdTagsWithId: (NSString*) _id
    fk: (NSString*) fk
    completionHandler: (void (^)(TWTag* output, NSError* error)) handler;


/// Queries categories of Design.
/// 
///
/// @param _id Design id
/// @param filter  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSArray<TWCategory>*
-(NSNumber*) designPrototypeGetCategoriesWithId: (NSString*) _id
    filter: (NSString*) filter
    completionHandler: (void (^)(NSArray<TWCategory>* output, NSError* error)) handler;


/// Fetches belongsTo relation customer.
/// 
///
/// @param _id Design id
/// @param refresh  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWCustomer*
-(NSNumber*) designPrototypeGetCustomerWithId: (NSString*) _id
    refresh: (NSNumber*) refresh
    completionHandler: (void (^)(TWCustomer* output, NSError* error)) handler;


/// Queries tags of Design.
/// 
///
/// @param _id Design id
/// @param filter  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSArray<TWTag>*
-(NSNumber*) designPrototypeGetTagsWithId: (NSString*) _id
    filter: (NSString*) filter
    completionHandler: (void (^)(NSArray<TWTag>* output, NSError* error)) handler;


/// Patch attributes for a model instance and persist it into the data source.
/// 
///
/// @param _id Design id
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designPrototypeUpdateAttributesPatchDesignsidWithId: (NSString*) _id
    data: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Patch attributes for a model instance and persist it into the data source.
/// 
///
/// @param _id Design id
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designPrototypeUpdateAttributesPutDesignsidWithId: (NSString*) _id
    data: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Update a related item by id for categories.
/// 
///
/// @param _id Design id
/// @param fk Foreign key for categories
/// @param data  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWCategory*
-(NSNumber*) designPrototypeUpdateByIdCategoriesWithId: (NSString*) _id
    fk: (NSString*) fk
    data: (TWCategory*) data
    completionHandler: (void (^)(TWCategory* output, NSError* error)) handler;


/// Update a related item by id for tags.
/// 
///
/// @param _id Design id
/// @param fk Foreign key for tags
/// @param data  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWTag*
-(NSNumber*) designPrototypeUpdateByIdTagsWithId: (NSString*) _id
    fk: (NSString*) fk
    data: (TWTag*) data
    completionHandler: (void (^)(TWTag* output, NSError* error)) handler;


/// Replace attributes for a model instance and persist it into the data source.
/// 
///
/// @param _id Model id
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designReplaceByIdWithId: (NSString*) _id
    data: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Replace an existing model instance or insert a new one into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designReplaceOrCreateWithData: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Update instances of the model matched by {{where}} from the data source.
/// 
///
/// @param where Criteria to match model instances (optional)
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWInlineResponse2001*
-(NSNumber*) designUpdateAllWithWhere: (NSString*) where
    data: (TWDesign*) data
    completionHandler: (void (^)(TWInlineResponse2001* output, NSError* error)) handler;


/// Patch an existing model instance or insert a new one into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designUpsertPatchDesignsWithData: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Patch an existing model instance or insert a new one into the data source.
/// 
///
/// @param data Model instance data (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designUpsertPutDesignsWithData: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;


/// Update an existing model instance or insert a new one into the data source based on the where criteria.
/// 
///
/// @param where Criteria to match model instances (optional)
/// @param data An object of model property name/value pairs (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return TWDesign*
-(NSNumber*) designUpsertWithWhereWithWhere: (NSString*) where
    data: (TWDesign*) data
    completionHandler: (void (^)(TWDesign* output, NSError* error)) handler;



@end
